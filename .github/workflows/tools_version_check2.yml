name: Check Security Tools Versions 2

on: [push, pull_request]

jobs:
  check-versions-2:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl

      - name: Parse config.yml
        run: |
          # Use your own logic here to extract tool versions from config.yml
          TOOL_VERSION=$(cat config.yml | grep "tool_name" | cut -d ':' -f2) # Example logic
          echo "TOOL_VERSION=$TOOL_VERSION" >> $GITHUB_ENV

      - name: Check latest version
        run: |
          # Fetch the latest version. This logic will depend on the tool you're checking
          LATEST_VERSION=$(curl -s https://api.example.com/tool/latest-version) # Example API call
          echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV

      - name: Compare versions and create issue if outdated
        run: |
          if [[ "$TOOL_VERSION" != "$LATEST_VERSION" ]]; then
            echo "Outdated version detected!"
            
            issue_data=$(cat <<- EOM
            {
              "title": "Outdated tool_name version detected",
              "body": "The current version of tool_name in config.yml is $TOOL_VERSION, but the latest available version is $LATEST_VERSION. Please update.",
              "labels": ["security", "update-needed"]
            }
            EOM
            )

            curl -s \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "$issue_data" \
              https://api.github.com/repos/${{ github.repository }}/issues
          fi
